# pir-one.yaml
# Demo of a PIR sensor on GPIO14 (D5) on a Wemos D1 Mini
# Also has a Dallas DS18B20 Temperature sensor and uptime sensor
#
substitutions:
  display_name: pir_one
  
esphome:
  name: ${display_name}
  platform: ESP8266
  board: d1_mini

#  includes:
#    - my_custom_sensor.h


wifi:
  ssid: "Kaywinnet"
  password: !secret wifi_password
  fast_connect: true

#  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Wemos_Switch Fallback Hotspot"
#    password: "Oi136ZHGIzON"
#
captive_portal:

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:

# Enable Over the Air updates
ota:
  safe_mode: True
  
#--------------------------------  
  
# A switch is to operate something external, like a relay attached to a gpio.  
switch:
  - platform: gpio
    name: ${display_name} RedLed
    restore_mode: ALWAYS_OFF            # Default off on boot
    pin:
      number: D6     # GPIO12
      mode: output
    id: red_led
    


    
  - platform: gpio
    name: ${display_name} statusLED
    pin:
      number: D7    #GPIO13
      mode: output
    id: green_led

  - platform: restart
    name: ${display_name} Restart


# A physical switch or button is a binary sensor for detecting something like grounding a GPIO pin.
binary_sensor:
  - platform: gpio
    pin: 
      number: D5    # GPIO14, PIR sensor
      inverted: False
     # mode: INPUT_PULLUP
    name: ${display_name} PIR
    id: wemos_button
    filters:
      - delayed_off: 5s             # Debounce

    on_press:
      then:
      - switch.turn_on: green_led
    on_release:
      then:
      - switch.turn_off: green_led



text_sensor:
  # Get the WiFi details
  - platform: wifi_info
    ip_address:
      name: ${display_name} IP Address
    ssid:
      name: ${display_name} SSID
    mac_address:
      name: ${display_name} Mac Address
  
  # Get the uptime    
  - platform: template
    name: ${display_name} Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

sensor:
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${display_name} WiFi Signal
    update_interval: 60s

  # Uptime sensor.
  - platform: uptime
    name: ${display_name} Uptime
  
  #Dallas DS18B20 Temperature sensor  
  - platform: dallas
    address: 0xD80416A022EDFF28
    name: ${display_name} Temperature
    unit_of_measurement: 'Â°F'
    filters:
    - lambda: return x * (9.0/5.0) + 32.0;
    
  - platform: uptime
    name: ${display_name} Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
              
              
dallas:
  - pin: D1    # GPIO5
    update_interval: 30s
    
#Blink the LED_BUILTIN if there's a problem, on otherwise.    
status_led:
  pin:
    number: D4     #GPIO2, LED_BUILTIN
    inverted: True